// Generates a patch of reported properties which includes:
// - Given edge device id
// - Alert and warning rules copied from the current desired rules in the twin
// - Deletions of rules/subrules which are generated by comparing the desired and reported rules in the twin
const generatePatch = (twin, edgeDeviceId) => {

    const patch = {
        edgeDeviceId: edgeDeviceId,
        alerts: {},
        warnings: {}
    }

    // Deep copy alert and warning rules to the patch to avoid sharing objects with the twin 
    // (objects in the patch are modified later if deletions are added)
    if (twin.properties.desired.alerts) {
        patch.alerts = JSON.parse(JSON.stringify(twin.properties.desired.alerts));
    }

    if (twin.properties.desired.warnings) {
        patch.warnings = JSON.parse(JSON.stringify(twin.properties.desired.warnings));
    }

    // Remove rules that don't exist anymore in the desired properties from the reported properties 
    // by adding them to the patch with null values.
    if (twin.properties.reported.alerts) {
        addDeletions(patch.alerts, twin.properties.reported.alerts);
    }

    if (twin.properties.reported.warnings) {
        addDeletions(patch.warnings, twin.properties.reported.warnings);
    }

    return patch;
}

const addDeletions = (patchRules, reportedRules) => {
    // Rules
    Object.keys(reportedRules).forEach((ruleKey) => {
        if (!patchRules[ruleKey]) {
            patchRules[ruleKey] = null;
        } else {
            // Subrules
            Object.keys(reportedRules[ruleKey]).forEach((subRuleKey) => {
                if (!patchRules[ruleKey][subRuleKey]) {
                    patchRules[ruleKey][subRuleKey] = null;
                }
            });
        }
    });
}

module.exports = {
    generatePatch: generatePatch
}
